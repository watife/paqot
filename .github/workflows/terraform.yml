name: 'Terraform'

on:
  push:
      branches: [ master, production ]
jobs:
  terraform:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest

    # Use the deploy folder as the working directory
    defaults:
      run:
        working-directory: ./deploy

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend=false

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

  terraform_plan:
    name: 'Staging and Production Plan and Apply'
    runs-on: ubuntu-latest

    # Use the deploy folder as the working directory
    defaults:
      run:
        working-directory: ./deploy

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        if:
          contains('
            refs/heads/mater
            refs/heads/production
          ', github.ref)
        run: terraform init

      - name: Terraform staging workspace
        if: github.ref == 'refs/heads/master'
        run: terraform workspace select staging || terraform workspace new staging

      - name: Terraform production workspace
        if: github.ref == 'refs/heads/production'
        run: terraform workspace select production || terraform workspace new production

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Plan
        if:
          contains('
          refs/heads/mater
          refs/heads/production
          ', github.ref)
        run: terraform plan

      - name: Terraform Apply
        if:
          contains('
          refs/heads/mater
          refs/heads/production
          ', github.ref) && github.event_name == 'push'
        run: terraform apply -auto-approve